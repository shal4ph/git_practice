#!/usr/bin/env node
const { spawnSync } = require('child_process');
const { mkdirSync, unlinkSync, createWriteStream, accessSync, constants } = require('fs');
const axios = require('axios');
const chalk = require('chalk');
const decompress = require('decompress');
const khjsUri = 'https://kh3-ls-storage.s3.amazonaws.com/JavaScript/kh-js-app-template.zip';
const folderName = process.argv[2];

const installDeps = (folder) =>
  new Promise((resolve, reject) => {
    let resp = spawnSync(`cd ${folder} && npm install --silent`, {
      stdio: 'inherit',
      shell: true,
    });

    if (resp.status !== 0) {
      console.log(chalk.green('The template could not be extracted. Please contact KnowledgeHut Support Team'));
      return reject();
    }

    return resolve();
  });

const extractTemplate = (archivePath, extractTo) =>
  new Promise(async (resolve, reject) => {
    try {
      await decompress(archivePath, extractTo);
      unlinkSync(archivePath);
      resolve();
    } catch (err) {
      reject(err);
    }
  });
const manageDownload = (response, writer) =>
  new Promise((resolve, reject) => {
    response.data.pipe(writer);
    writer.on('error', (error) => {
      writer.close();
      reject();
    });

    writer.on('close', () => resolve());
  });
const downloadTemplate = (folder, templateUri) =>
  new Promise(async (resolve, reject) => {
    try {
      const writer = createWriteStream(`${folder}/template.zip`);
      const downStream = await axios({
        method: 'get',
        url: templateUri,
        responseType: 'stream',
      });
      await manageDownload(downStream, writer);
      resolve();
    } catch (err) {
      reject(err);
    }
  });

const main = async (master, fldName) => {
  try {
    await downloadTemplate(master, khjsUri);
    console.log(chalk.magenta(`- Downloading assets...`));
    await extractTemplate(`${master}/template.zip`, master);
    console.log(chalk.magenta(`- Setting up project...`));
    await installDeps(fldName);
    console.log(chalk.cyan('Success! Your template has been setup!\n'));
    console.log(chalk.magenta.underline('Instructions'));
    console.log(chalk.cyan(`1. To bring up the development server, cd into your project folder (cd ${fldName}) and run 'npm run dev'`));
    console.log(chalk.cyan("2. To produce a production build for uploading on the web, type 'npm run build'"));
  } catch (err) {
    console.log(chalk.bgRed.black(`There was an error. Please contact KnowledgeHut Support`));
  }
};

if (!folderName) {
  console.log(chalk.bgYellow.black('KnowledgeHut upGrad | Create a JavaScript App'));
  console.log('Please specify a project folder:');
  console.log(`    ${chalk.cyan('npx @knowledgehut/create-js-app')} ${chalk.green('<project-folder>\n')}`);
  console.log('For example:');
  console.log(`    ${chalk.cyan('npx @knowledgehut/create-js-app')} ${chalk.green('my-website\n')}`);
} else {
  const masterDirectory = `${process.cwd()}/${folderName}`;
  console.log(chalk.bgYellow.black('KnowledgeHut upGrad | JavaScript Starter Template'));
  console.log(`${chalk.cyan('Your JavaScript website/app project has been setup in ')} ${chalk.green(folderName)}\n`);
  try {
    accessSync(masterDirectory, constants.R_OK | constants.W_OK);
    console.log(chalk.magenta(`- ${folderName} already exists. Repurposing the folder...`));
    main(masterDirectory, folderName);
  } catch (err) {
    mkdirSync(masterDirectory);
    console.log(chalk.magenta(`- ${folderName} was successfully created...`));
    main(masterDirectory, folderName);
  }
}
